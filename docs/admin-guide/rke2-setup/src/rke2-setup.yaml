- name: Setup RKE2 node
  hosts: "{{ host | default('rke2_nodes') }}"
  become: true
  vars_files:
    - rke2_vars
  tasks:
    # Storage disk setup
    - name: Create a mount directory for data storage
      file:
        path: "{{ storage_directory }}"
        state: directory
        mode: '0755'
      when: storage_setup | default(false) | bool

    - name: Create File System for data storage dir
      filesystem:
        fstype: ext4
        dev: "{{ storage_mount_point }}"
      when: storage_setup | default(false) | bool

    - name: Get UUID for containers disk
      command: blkid -s UUID -o value "{{ storage_mount_point }}"
      register: storage_disk_blkid
      when: storage_setup | default(false) | bool

    - name: Mount up device by UUID
      mount:
        path: "{{ storage_directory }}"
        src: 'UUID={{ storage_disk_blkid.stdout | quote }}'
        fstype: ext4
        opts: noatime
        state: mounted
      when: storage_setup | default(false) | bool

    # RKE2 prerequisites
    - name: Add first server IP to hosts
      lineinfile:
        path: /etc/hosts
        state: present
        line: "{{ rke2_initial_server_ip  }}    {{ rke2_initial_server_hostname }}"
      when: not (initial_server | default(false) | bool)

    - name: Setup network manager
      blockinfile:
        path: /etc/NetworkManager/conf.d/rke2-canal.conf
        create: yes
        state: present
        block: |
          [keyfile]
          unmanaged-devices=interface-name:cali*;interface-name:flannel*

    - name: Reload Network manager
      systemd:
        service: NetworkManager
        state: reloaded

    - name: Disable FireWall
      systemd:
        service: firewalld
        enabled: false

    - name: Stop FireWall
      systemd:
        service: firewalld
        state: stopped

    # RKE2 server setup
    - name: Upload RKE2 installer
      copy:
        src: rke2-install.sh
        dest: /tmp/rke2-install.sh

    - name: Run installer
      command: sh /tmp/rke2-install.sh

    - name: Create config file for first server
      lineinfile:
        path: /etc/rancher/rke2/config.yaml
        create: yes
        state: present
        line: "token: {{ rke2_shared_token }}"
      when: initial_server | default(false) | bool

    - name: Create config file for other servers
      blockinfile:
        path: /etc/rancher/rke2/config.yaml
        create: yes
        state: present
        block: |
          server: https://{{ rke2_initial_server_hostname }}:9345
          token: {{ rke2_shared_token }}
      when: not (initial_server | default(false) | bool)

    - name: Enable RKE2 server
      systemd:
        service: rke2-server.service
        enabled: yes

    - name: Start RKE2 initial server
      systemd:
        service: rke2-server.service
        state: started
      # It is required to run initial server before others
      when: initial_server | default(false) | bool

    - name: Start RKE2 additional servers
      throttle: 1
      systemd:
        service: rke2-server.service
        state: started
      when: not (initial_server | default(false) | bool)

    # Longhorn prerequisites
    - name: Link kubectl binary
      file:
        src: /var/lib/rancher/rke2/bin/kubectl
        dest: /bin/kubectl
        state: link

    - name: Check status of the cluster nodes
      command: kubectl get nodes
      register: nodes_status
      environment:
        KUBECONFIG: "/etc/rancher/rke2/rke2.yaml"
      run_once: true

    - name: View k8s nodes
      debug:
       msg: "{{ nodes_status.stdout }}"
      run_once: true

    - name: Check if Helm is installed
      command: which helm
      changed_when: false
      failed_when: helm_installed.rc not in [0, 1]
      register: helm_installed

    - name: Install packages
      dnf:
        pkg:
          - tar
          - iscsi-initiator-utils
        state: installed
      when:
        helm_installed.rc != 0

    # Helm installation
    - name: Download Helm installer
      copy:
        src: get-helm.sh
        dest: /tmp/get-helm.sh
        mode: '700'
      when:
        helm_installed.rc != 0

    - name: Install Helm
      command: sh /tmp/get-helm.sh
      environment:
        HELM_INSTALL_DIR: /usr/bin
      when:
        helm_installed.rc != 0

    - name: Check Helm installation
      command: helm ls
      register: release_list
      environment:
        KUBECONFIG: "/etc/rancher/rke2/rke2.yaml"

    - name: View Helm releases
      debug:
        msg: "{{ release_list.stdout }}"
      run_once: true

    # Longhorn installation
    - name: Add Longhorn repository
      kubernetes.core.helm_repository:
        repo_name: longhorn
        repo_url: https://charts.longhorn.io
        repo_state: present

    - name: Install Longhorn release
      kubernetes.core.helm:
        chart_ref: longhorn/longhorn
        chart_version: 1.3.1
        release_name: longhorn
        state: present
        namespace: longhorn-system
        update_repo_cache: true
        create_namespace: true
        kubeconfig: /etc/rancher/rke2/rke2.yaml
        values:
          defaultSettings:
            defaultDataPath: "{{ storage_directory }}"
      run_once: true

    - name: Add k8s dashboard repository
      kubernetes.core.helm_repository:
        repo_name: kubernetes-dashboard
        repo_url: https://kubernetes.github.io/dashboard/
        repo_state: present

    - name: Install k8s dashboard release
      kubernetes.core.helm:
        chart_ref: kubernetes-dashboard/kubernetes-dashboard
        chart_version: 5.10.0
        release_name: kubernetes-dashboard
        state: present
        namespace: kubernetes-dashboard
        update_repo_cache: true
        create_namespace: true
        kubeconfig: /etc/rancher/rke2/rke2.yaml
